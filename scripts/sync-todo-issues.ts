#!/usr/bin/env ts-node

/**
 * Script de synchronisation TODO -> Issues GitHub
 * Impl√©mente la strat√©gie d'alignement recommand√©e
 */

import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

interface TodoTask {
  title: string;
  priority: 'P0' | 'P1' | 'P2';
  week: string;
  description: string;
  status: 'todo' | 'in-progress' | 'done';
  labels: string[];
}

interface GitHubIssue {
  title: string;
  body: string;
  labels: string[];
  milestone?: string;
}

class TodoIssueSync {
  private todoPath = path.join(process.cwd(), 'todo.md');
  private repoOwner = 'SalamBot-Org';
  private repoName = 'salambot-suite';

  /**
   * Parse le fichier TODO.md et extrait les t√¢ches structur√©es
   */
  private parseTodoFile(): TodoTask[] {
    const todoContent = fs.readFileSync(this.todoPath, 'utf-8');
    const tasks: TodoTask[] = [];

    // Regex pour extraire les sections P0 et P1
    const prioritySections = todoContent.match(/## üî• PRIORIT√â P0[\s\S]*?(?=## üöÄ PRIORIT√â P1)|## üöÄ PRIORIT√â P1[\s\S]*?(?=## üìà PRIORIT√â P2|$)/g);

    prioritySections?.forEach(section => {
      const priority = section.includes('P0') ? 'P0' : 'P1';
      
      // Extraire les sous-sections (ex: D√©tection Darija, API Gateway)
      const subsections = section.match(/### [^\n]+[\s\S]*?(?=###|$)/g);
      
      subsections?.forEach(subsection => {
        const titleMatch = subsection.match(/### (.+)/);
        if (!titleMatch) return;

        const title = titleMatch[1]
          .replace(/üéØ|üåê|üìä|üîê|üì±|üõ†Ô∏è/g, '')
          .replace(/\[P0-CRITIQUE\]|\[P1-IMPORTANT\]/g, '')
          .trim();
        
        // Extraire les t√¢ches individuelles
        const taskMatches = subsection.match(/- \[([ x])\] \*\*(.+?)\*\* : (.+)/g);
        
        taskMatches?.forEach(taskMatch => {
          const [, status, week, description] = taskMatch.match(/- \[([ x])\] \*\*(.+?)\*\* : (.+)/) || [];
          
          tasks.push({
            title: `[${priority}-${priority === 'P0' ? 'CRITIQUE' : 'IMPORTANT'}] ${title} - ${description}`,
            priority: priority as 'P0' | 'P1',
            week,
            description,
            status: status === 'x' ? 'done' : 'todo',
            labels: this.generateLabels(priority, title)
          });
        });
      });
    });

    return tasks;
  }

  /**
   * G√©n√®re les labels appropri√©s pour une t√¢che
   */
  private generateLabels(priority: string, title: string): string[] {
    const labels = [priority === 'P0' ? 'P0-CRITIQUE' : 'P1-IMPORTANT'];
    
    // Labels bas√©s sur le contenu
    if (title.includes('Darija') || title.includes('AI')) labels.push('ai', 'nlp');
    if (title.includes('API') || title.includes('Gateway')) labels.push('backend', 'api');
    if (title.includes('Test') || title.includes('Coverage')) labels.push('testing', 'quality');
    if (title.includes('Auth') || title.includes('S√©curit√©')) labels.push('security', 'auth');
    if (title.includes('Infrastructure') || title.includes('Terraform')) labels.push('infrastructure', 'devops');
    if (title.includes('Widget') || title.includes('Agent')) labels.push('frontend', 'ui');
    if (title.includes('Documentation')) labels.push('documentation');
    
    return labels;
  }

  /**
   * Cr√©e ou met √† jour les milestones GitHub
   */
  private async createMilestones(): Promise<void> {
    const milestones = [
      { title: 'Semaine 1-2 (P0 Critique)', description: 'T√¢ches critiques √† compl√©ter en priorit√© absolue' },
      { title: 'Semaine 3-4 (P1 Important)', description: 'T√¢ches importantes pour la stabilit√© du projet' },
      { title: 'Semaine 5-6 (P2 Nice-to-have)', description: 'Am√©liorations et optimisations' }
    ];

    for (const milestone of milestones) {
      try {
        execSync(`gh api repos/${this.repoOwner}/${this.repoName}/milestones -f title="${milestone.title}" -f description="${milestone.description}"`, 
          { stdio: 'pipe' });
        console.log(`‚úÖ Milestone cr√©√©: ${milestone.title}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Milestone existe d√©j√†: ${milestone.title}`);
      }
    }
  }

  /**
   * Cr√©e les labels GitHub n√©cessaires
   */
  private async createLabels(): Promise<void> {
    const labels = [
      { name: 'P0-CRITIQUE', color: 'ff0000', description: 'Priorit√© critique - √Ä traiter imm√©diatement' },
      { name: 'P1-IMPORTANT', color: 'ff8c00', description: 'Priorit√© importante - √Ä traiter rapidement' },
      { name: 'P2-NICE-TO-HAVE', color: 'ffd700', description: 'Am√©lioration souhait√©e' },
      { name: 'ai', color: '9932cc', description: 'Intelligence artificielle et NLP' },
      { name: 'nlp', color: '8a2be2', description: 'Natural Language Processing' },
      { name: 'backend', color: '008080', description: 'D√©veloppement backend' },
      { name: 'api', color: '20b2aa', description: 'API et services web' },
      { name: 'testing', color: '32cd32', description: 'Tests et qualit√©' },
      { name: 'quality', color: '228b22', description: 'Assurance qualit√©' },
      { name: 'security', color: 'dc143c', description: 'S√©curit√© et authentification' },
      { name: 'auth', color: 'b22222', description: 'Authentification' },
      { name: 'infrastructure', color: '4682b4', description: 'Infrastructure et DevOps' },
      { name: 'devops', color: '1e90ff', description: 'DevOps et CI/CD' },
      { name: 'frontend', color: 'ff69b4', description: 'Interface utilisateur' },
      { name: 'ui', color: 'ff1493', description: 'User Interface' },
      { name: 'documentation', color: '9370db', description: 'Documentation technique' }
    ];

    for (const label of labels) {
      try {
        execSync(`gh api repos/${this.repoOwner}/${this.repoName}/labels -f name="${label.name}" -f color="${label.color}" -f description="${label.description}"`, 
          { stdio: 'pipe' });
        console.log(`‚úÖ Label cr√©√©: ${label.name}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è  Label existe d√©j√†: ${label.name}`);
      }
    }
  }

  /**
   * Cr√©e une issue GitHub √† partir d'une t√¢che TODO
   */
  private async createIssue(task: TodoTask): Promise<void> {
    const milestone = task.priority === 'P0' ? 'Semaine 1-2 (P0 Critique)' : 'Semaine 3-4 (P1 Important)';
    
    const body = `## üìã Description

${task.description}

## üéØ Objectifs

- [ ] Impl√©mentation compl√®te
- [ ] Tests unitaires
- [ ] Documentation mise √† jour
- [ ] Review de code

## üìÖ Planning

**√âch√©ance:** ${task.week}
**Priorit√©:** ${task.priority}

## üîó R√©f√©rences

- Voir TODO.md pour les d√©tails techniques
- Li√© au milestone: ${milestone}

---

*Issue g√©n√©r√©e automatiquement depuis TODO.md*`;

    const labelsStr = task.labels.map(l => `"${l}"`).join(',');
    
    try {
      const result = execSync(
        `gh issue create --title "${task.title}" --body "${body}" --label ${labelsStr} --milestone "${milestone}"`,
        { encoding: 'utf-8', stdio: 'pipe' }
      );
      console.log(`‚úÖ Issue cr√©√©e: ${task.title}`);
      console.log(`   URL: ${result.trim()}`);
    } catch (error) {
      console.error(`‚ùå Erreur cr√©ation issue: ${task.title}`);
      console.error(error);
    }
  }

  /**
   * V√©rifie si une issue existe d√©j√† pour une t√¢che
   */
  private async issueExists(taskTitle: string): Promise<boolean> {
    try {
      const result = execSync(
        `gh issue list --search "${taskTitle}" --json title`,
        { encoding: 'utf-8', stdio: 'pipe' }
      );
      const issues = JSON.parse(result);
      return issues.some((issue: any) => issue.title.includes(taskTitle.split(' - ')[0]));
    } catch (error) {
      return false;
    }
  }

  /**
   * Synchronise toutes les t√¢ches TODO avec GitHub Issues
   */
  public async syncAll(): Promise<void> {
    console.log('üöÄ D√©but de la synchronisation TODO -> Issues GitHub\n');

    // 1. Cr√©er les labels et milestones
    console.log('üìã Cr√©ation des labels...');
    await this.createLabels();
    
    console.log('\nüéØ Cr√©ation des milestones...');
    await this.createMilestones();

    // 2. Parser le TODO
    console.log('\nüìñ Analyse du fichier TODO.md...');
    const tasks = this.parseTodoFile();
    console.log(`   ${tasks.length} t√¢ches trouv√©es`);

    // 3. Cr√©er les issues
    console.log('\nüîÑ Cr√©ation des issues...');
    let created = 0;
    let skipped = 0;

    for (const task of tasks) {
      if (task.status === 'done') {
        console.log(`‚è≠Ô∏è  T√¢che termin√©e ignor√©e: ${task.title}`);
        skipped++;
        continue;
      }

      const exists = await this.issueExists(task.title);
      if (exists) {
        console.log(`‚è≠Ô∏è  Issue existe d√©j√†: ${task.title}`);
        skipped++;
        continue;
      }

      await this.createIssue(task);
      created++;
      
      // Pause pour √©viter le rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log(`\n‚úÖ Synchronisation termin√©e!`);
    console.log(`   üìä ${created} issues cr√©√©es`);
    console.log(`   ‚è≠Ô∏è  ${skipped} t√¢ches ignor√©es`);
    console.log(`\nüîó Voir toutes les issues: https://github.com/${this.repoOwner}/${this.repoName}/issues`);
  }

  /**
   * Mode dry-run pour pr√©visualiser les changements
   */
  public async dryRun(): Promise<void> {
    console.log('üîç Mode dry-run - Pr√©visualisation des changements\n');
    
    const tasks = this.parseTodoFile();
    console.log(`üìä ${tasks.length} t√¢ches trouv√©es dans TODO.md\n`);

    const p0Tasks = tasks.filter(t => t.priority === 'P0');
    const p1Tasks = tasks.filter(t => t.priority === 'P1');

    console.log(`üî• T√¢ches P0 (${p0Tasks.length}):`);
    p0Tasks.forEach(task => {
      console.log(`   - ${task.title}`);
      console.log(`     Labels: ${task.labels.join(', ')}`);
    });

    console.log(`\nüöÄ T√¢ches P1 (${p1Tasks.length}):`);
    p1Tasks.forEach(task => {
      console.log(`   - ${task.title}`);
      console.log(`     Labels: ${task.labels.join(', ')}`);
    });

    console.log(`\nüí° Pour ex√©cuter la synchronisation: npm run sync-todo-issues`);
  }
}

// Ex√©cution du script
if (require.main === module) {
  const sync = new TodoIssueSync();
  const isDryRun = process.argv.includes('--dry-run');
  
  if (isDryRun) {
    sync.dryRun().catch(console.error);
  } else {
    sync.syncAll().catch(console.error);
  }
}

export default TodoIssueSync;