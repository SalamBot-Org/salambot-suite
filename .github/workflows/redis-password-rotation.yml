# @file        .github/workflows/redis-password-rotation.yml
# @description Automated Redis password rotation for security compliance
# @author      SalamBot Team (contact: info@salambot.ma)
# @created     2025-01-20
# @updated     2025-01-20
# @project     SalamBot - AI CRM for Moroccan SMEs

name: Redis Password Rotation

# Ex√©cution planifi√©e le 1er de chaque mois √† 02:00 UTC
# et possibilit√© de d√©clenchement manuel
on:
  schedule:
    # Cron: minute hour day month day-of-week
    # 0 2 1 * * = 02:00 UTC le 1er de chaque mois
    - cron: '0 2 1 * *'

  # Permet le d√©clenchement manuel depuis l'interface GitHub
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rotate password for'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      dry_run:
        description: 'Dry run mode (simulation only)'
        required: false
        default: false
        type: boolean

# Variables d'environnement globales
env:
  NODE_VERSION: '22'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  rotate-redis-password:
    name: Rotate Redis Password
    runs-on: ubuntu-latest

    # Permissions n√©cessaires
    permissions:
      contents: read
      id-token: write # Pour l'authentification Google Cloud

    # Matrice pour les environnements (si d√©clenchement automatique)
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["'{0}'"]', github.event.inputs.environment)) || fromJson('["dev", "production"]') }}

    environment: ${{ matrix.environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Dependencies
        run: |
          npm ci
          npm run build:config

      - name: Verify Environment Configuration
        run: |
          echo "Environment: ${{ matrix.environment }}"
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run || 'false' }}"

          # V√©rifier que Terraform est configur√©
          cd infra/terraform
          terraform version
          terraform init -backend=false
          terraform validate

      - name: Initialize Terraform Backend
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="prefix=redis/${{ matrix.environment }}"

      - name: Check Current Redis Configuration
        run: |
          echo "üîç V√©rification de la configuration Redis actuelle..."

          # Utiliser le script de validation pour v√©rifier l'√©tat
          node -e "
            const { checkRedisHealth } = require('./libs/config/dist/redis');
            checkRedisHealth().then(health => {
              console.log('√âtat Redis:', health);
              if (health.status !== 'healthy') {
                console.warn('‚ö†Ô∏è Redis n\'est pas en √©tat healthy');
              }
            }).catch(err => {
              console.warn('‚ö†Ô∏è Impossible de v√©rifier Redis:', err.message);
            });
          "
        env:
          NODE_ENV: ${{ matrix.environment }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Dry Run - Simulate Password Rotation
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üß™ Mode simulation - Rotation du mot de passe Redis"
          echo "Environment: ${{ matrix.environment }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # Simulation des √©tapes principales
          echo "‚úì G√©n√©ration d'un nouveau mot de passe (simul√©)"
          echo "‚úì Mise √† jour Secret Manager (simul√©)"
          echo "‚úì Mise √† jour Firestore (simul√©)"
          echo "‚úì Application Terraform (simul√©)"
          echo "‚úì V√©rification connexion Redis (simul√©)"

          echo "üéâ Simulation termin√©e avec succ√®s!"

      - name: Execute Password Rotation
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üîÑ Ex√©cution de la rotation du mot de passe Redis..."

          # Ex√©cuter le script de rotation
          npx tsx scripts/rotate-redis-password.ts
        env:
          NODE_ENV: ${{ matrix.environment }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        timeout-minutes: 15

      - name: Verify Redis Health After Rotation
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üè• V√©rification de la sant√© Redis apr√®s rotation..."

          # Attendre un peu pour que les changements se propagent
          sleep 10

          # V√©rifier la sant√© Redis
          node -e "
            const { checkRedisHealth } = require('./libs/config/dist/redis');
            
            async function verify() {
              let attempts = 0;
              const maxAttempts = 5;
              
              while (attempts < maxAttempts) {
                try {
                  const health = await checkRedisHealth();
                  console.log('Tentative', attempts + 1, '- √âtat Redis:', health);
                  
                  if (health.status === 'healthy') {
                    console.log('‚úÖ Redis est en bonne sant√©!');
                    process.exit(0);
                  }
                  
                  attempts++;
                  if (attempts < maxAttempts) {
                    console.log('‚è≥ Attente avant nouvelle tentative...');
                    await new Promise(resolve => setTimeout(resolve, 5000));
                  }
                } catch (error) {
                  console.error('Erreur lors de la v√©rification:', error.message);
                  attempts++;
                }
              }
              
              console.error('‚ùå Redis n\'est pas accessible apr√®s rotation');
              process.exit(1);
            }
            
            verify();
          "
        env:
          NODE_ENV: ${{ matrix.environment }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        timeout-minutes: 5

      - name: Cleanup Terraform Plans
        if: always()
        working-directory: infra/terraform
        run: |
          # Nettoyer les fichiers de plan temporaires
          rm -f tfplan *.tfplan

      - name: Report Results
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Rotation du mot de passe Redis r√©ussie pour l'environnement ${{ matrix.environment }}"
          else
            echo "‚ùå √âchec de la rotation du mot de passe Redis pour l'environnement ${{ matrix.environment }}"
          fi

          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Environment: ${{ matrix.environment }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run || 'false' }}"

      # TODO: Ajouter une notification Slack/Teams en cas d'√©chec
      - name: Notify on Failure
        if: failure()
        run: |
          echo "üö® ALERTE: √âchec de la rotation du mot de passe Redis!"
          echo "Environment: ${{ matrix.environment }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # TODO: Int√©grer avec un service de notification
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-type: application/json' \
          #   --data '{"text":"üö® √âchec rotation Redis password pour ${{ matrix.environment }}"}'
