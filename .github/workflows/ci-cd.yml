name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - 'release/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Nx cache
        uses: nrwl/nx-set-shas@v3

      - name: Lint
        run: pnpm nx affected --target=lint --parallel=3

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Nx cache
        uses: nrwl/nx-set-shas@v3

      - name: Test
        run: pnpm nx affected --target=test --parallel=3

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Nx cache
        uses: nrwl/nx-set-shas@v3

      - name: Build
        run: pnpm nx affected --target=build --parallel=3

      - name: Upload widget-web build
        uses: actions/upload-artifact@v3
        with:
          name: widget-web-build
          path: dist/apps/widget-web
          retention-days: 1

      - name: Upload agent-desk build
        uses: actions/upload-artifact@v3
        with:
          name: agent-desk-build
          path: dist/apps/agent-desk
          retention-days: 1

      - name: Upload functions-run build
        uses: actions/upload-artifact@v3
        with:
          name: functions-run-build
          path: dist/apps/functions-run
          retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    permissions:
      contents: read
      id-token: write # Nécessaire pour l'authentification OIDC
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download widget-web build
        uses: actions/download-artifact@v3
        with:
          name: widget-web-build
          path: dist/apps/widget-web

      - name: Download agent-desk build
        uses: actions/download-artifact@v3
        with:
          name: agent-desk-build
          path: dist/apps/agent-desk

      - name: Download functions-run build
        uses: actions/download-artifact@v3
        with:
          name: functions-run-build
          path: dist/apps/functions-run

      # Déploiement Vercel pour widget-web
      - name: Deploy widget-web to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WIDGET }}
          working-directory: dist/apps/widget-web
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
          alias-domains: |
            ${{ github.ref == 'refs/heads/main' && 'widget.salambot.app' || format('widget-{0}.salambot.app', github.ref_name) }}

      # Déploiement Vercel pour agent-desk
      - name: Deploy agent-desk to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_DESK }}
          working-directory: dist/apps/agent-desk
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
          alias-domains: |
            ${{ github.ref == 'refs/heads/main' && 'desk.salambot.app' || format('desk-{0}.salambot.app', github.ref_name) }}

      # Authentification Google Cloud via OIDC
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Configuration Docker pour GCR
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Authentification Docker pour GCR
      - name: Docker Auth
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      # Création du fichier .env pour Cloud Run
      - name: Create .env file
        run: |
          cat > .env.prod << EOF
          PORT=8080
          NODE_ENV=production
          CORS_ORIGINS=https://widget.salambot.app,https://desk.salambot.app
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          JWT_PRIVATE_KEY='${{ secrets.JWT_PRIVATE_KEY }}'
          JWT_PUBLIC_KEY='${{ secrets.JWT_PUBLIC_KEY }}'
          PERSISTENCE_DRIVER=firestore
          OTLP_ENDPOINT=${{ secrets.OTLP_ENDPOINT }}
          OTLP_HEADERS=${{ secrets.OTLP_HEADERS }}
          EOF
          mv .env.prod dist/apps/functions-run/.env

      # Build et push de l'image Docker pour functions-run
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: dist/apps/functions-run
          push: true
          tags: |
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/salambot-functions-run:${{ github.sha }}
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/salambot-functions-run:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Déploiement sur Cloud Run
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: salambot-functions-run
          region: europe-west1
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/salambot-functions-run:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            CORS_ORIGINS=https://widget.salambot.app,https://desk.salambot.app
          secrets: |
            FIREBASE_API_KEY=FIREBASE_API_KEY:latest
            FIREBASE_PROJECT_ID=FIREBASE_PROJECT_ID:latest
            JWT_PRIVATE_KEY=JWT_PRIVATE_KEY:latest
            JWT_PUBLIC_KEY=JWT_PUBLIC_KEY:latest
            OTLP_ENDPOINT=OTLP_ENDPOINT:latest
            OTLP_HEADERS=OTLP_HEADERS:latest
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=1
            --max-instances=10
            --concurrency=80
            --timeout=300s

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/release/') || github.ref == 'refs/heads/main')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install --with-deps chromium

      - name: Create smoke test
        run: |
          mkdir -p smoke-tests
          cat > smoke-tests/smoke.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('Widget is accessible and functional', async ({ page }) => {
            // Visiter le widget
            await page.goto('https://${{ github.ref == 'refs/heads/main' && 'widget' || format('widget-{0}', github.ref_name) }}.salambot.app');
            
            // Vérifier que le widget est chargé
            await expect(page.locator('text=SalamBot')).toBeVisible();
            
            // Envoyer un message
            await page.fill('input[type="text"]', 'Test message from smoke test');
            await page.press('input[type="text"]', 'Enter');
            
            // Vérifier que le message est envoyé et qu'une réponse est reçue
            await expect(page.locator('text=Test message from smoke test')).toBeVisible();
            await expect(page.locator('text=SalamBot')).toBeVisible();
          });

          test('Agent Desk is accessible', async ({ page }) => {
            // Visiter l'Agent Desk
            await page.goto('https://${{ github.ref == 'refs/heads/main' && 'desk' || format('desk-{0}', github.ref_name) }}.salambot.app');
            
            // Vérifier que la page de login est chargée
            await expect(page.locator('text=Connexion')).toBeVisible();
          });

          test('API endpoints are responding', async ({ request }) => {
            // Vérifier l'endpoint de santé
            const healthResponse = await request.get('https://${{ secrets.CLOUD_RUN_URL }}/health');
            expect(healthResponse.ok()).toBeTruthy();
            
            // Vérifier que l'endpoint /chat est protégé (401 sans token)
            const chatResponse = await request.post('https://${{ secrets.CLOUD_RUN_URL }}/chat', {
              data: { message: 'Test' }
            });
            expect(chatResponse.status()).toBe(401);
            
            // Vérifier que l'endpoint /wa/webhook est accessible
            const waResponse = await request.get('https://${{ secrets.CLOUD_RUN_URL }}/wa/webhook');
            expect(waResponse.status()).toBe(200);
          });
          EOF

          cat > smoke-tests/playwright.config.js << 'EOF'
          module.exports = {
            testDir: './',
            timeout: 30000,
            retries: 2,
            use: {
              headless: true,
              viewport: { width: 1280, height: 720 },
              ignoreHTTPSErrors: true,
              video: 'on-first-retry',
            },
            reporter: [
              ['html'],
              ['json', { outputFile: 'test-results.json' }],
            ],
          };
          EOF

      - name: Run smoke tests
        run: |
          cd smoke-tests
          npx playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: smoke-tests/test-results
          retention-days: 7
