# @file        Configuration CI/CD pour le monorepo SalamBot
# @author      SalamBot Team (contact: info@salambot.ma)
# @created     2025-05-25
# @updated     2025-05-25
# @project     SalamBot - AI CRM for Moroccan SMEs

name: SalamBot CI

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Lint
        run: pnpm lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Start Mock Services
        run: |
          chmod +x scripts/start-mock-services.sh
          ./scripts/start-mock-services.sh
        working-directory: .
        env:
          MOCK_GENKIT_PORT: 3001
          MOCK_REST_API_PORT: 3002
          MOCK_WEBSOCKET_PORT: 3003
          MOCK_PROMETHEUS_PORT: 3004
      
      - name: Wait for Mock Services Health Check
        run: |
          echo "Waiting for mock services to be ready..."
          sleep 15  # Augment√© de 10 √† 15 secondes
          
          # V√©rifier que les services sont accessibles avec plus de timeout et retry
          for port in 3001 3002 3004; do  # 3003 n'a pas de /health endpoint
            echo "Checking service on port $port..."
            retry_count=0
            max_retries=5
            
            while [ $retry_count -lt $max_retries ]; do
              if timeout 10 bash -c "curl -f -s --connect-timeout 3 --max-time 5 http://localhost:$port/health" > /dev/null 2>&1; then
                echo "‚úÖ Service on port $port is healthy"
                break
              else
                retry_count=$((retry_count + 1))
                echo "‚è≥ Retry $retry_count/$max_retries for port $port..."
                sleep 3
                
                if [ $retry_count -eq $max_retries ]; then
                  echo "‚ùå Service on port $port failed to start after $max_retries retries"
                  echo "üìã Checking process logs..."
                  cd apps/functions-run
                  if [ -f "logs/genkit.log" ] && [ "$port" = "3001" ]; then
                    echo "Genkit service logs:"
                    tail -n 30 logs/genkit.log
                  elif [ -f "logs/rest-api.log" ] && [ "$port" = "3002" ]; then
                    echo "REST API service logs:"
                    tail -n 30 logs/rest-api.log
                  elif [ -f "logs/prometheus.log" ] && [ "$port" = "3004" ]; then
                    echo "Prometheus service logs:"
                    tail -n 30 logs/prometheus.log
                  else
                    echo "No log file found for port $port"
                  fi
                  cd ../..
                  exit 1
                fi
              fi
            done
          done
          
          # V√©rification sp√©ciale pour WebSocket (port 3003) - juste v√©rifier que le port est ouvert
          echo "Checking WebSocket service on port 3003..."
          if timeout 10 bash -c "until nc -z localhost 3003; do sleep 1; done"; then
            echo "‚úÖ WebSocket service on port 3003 is ready"
          else
            echo "‚ùå WebSocket service on port 3003 failed to start"
            cd apps/functions-run
            if [ -f "logs/websocket.log" ]; then
              echo "WebSocket service logs:"
              tail -n 30 logs/websocket.log
            fi
            cd ../..
            exit 1
          fi
          
          echo "‚úÖ All mock services are ready!"

      - name: Test
        run: |
          echo "Starting tests with 5 minute timeout..."
          timeout 300 pnpm test || {
            echo "Tests failed or timed out after 5 minutes"
            echo "Checking mock services status..."
            for port in 3001 3002 3003 3004; do
              curl -f http://localhost:$port/health 2>/dev/null && echo "Port $port: OK" || echo "Port $port: FAILED"
            done
            echo "Displaying recent logs for debugging..."
            cd apps/functions-run
            for log_file in logs/*.log; do
              if [ -f "$log_file" ]; then
                echo "=== Last 10 lines of $log_file ==="
                tail -n 10 "$log_file"
              fi
            done
            cd ../..
            exit 1
          }
        env:
          # Ensure tests know mock services are available
          MOCK_SERVICES_ENABLED: true
          MOCK_GENKIT_PORT: 3001
          MOCK_REST_API_PORT: 3002
          MOCK_WEBSOCKET_PORT: 3003
          MOCK_PROMETHEUS_PORT: 3004
          # Timeout Jest optimis√© pour les tests CI
          JEST_TIMEOUT: 20000

      - name: Stop Mock Services
        if: always()
        run: |
          chmod +x scripts/stop-mock-services.sh
          ./scripts/stop-mock-services.sh
        working-directory: .

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Build
        run: pnpm build

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Security Audit
        run: |
          echo "üîç Running security audit..."
          pnpm audit --audit-level moderate
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Security vulnerabilities detected!"
            echo "Please run 'pnpm audit --fix' to resolve them."
            exit 1
          else
            echo "‚úÖ No security vulnerabilities found."
          fi

      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          pnpm outdated || echo "Some dependencies are outdated. Consider updating them."
