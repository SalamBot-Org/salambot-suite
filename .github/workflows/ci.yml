# @file        Configuration CI/CD pour le monorepo SalamBot
# @author      SalamBot Team (contact: info@salambot.ma)
# @created     2025-05-25
# @updated     2025-05-25
# @project     SalamBot - AI CRM for Moroccan SMEs

name: SalamBot CI

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Lint
        run: pnpm lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Start Mock Services
        run: |
          chmod +x scripts/start-mock-services.sh
          ./scripts/start-mock-services.sh
        working-directory: .
        env:
          MOCK_GENKIT_PORT: 3001
          MOCK_REST_API_PORT: 3002
          MOCK_WEBSOCKET_PORT: 3003
          MOCK_PROMETHEUS_PORT: 3004
      
      - name: Wait for Mock Services Health Check
        run: |
          echo "Waiting for mock services to be ready..."
          sleep 10
          
          # V√©rifier que les services sont accessibles avec plus de timeout
          for port in 3001 3002 3003 3004; do
            echo "Checking service on port $port..."
            timeout 60 bash -c "until curl -f http://localhost:$port/health 2>/dev/null; do sleep 2; done" || {
              echo "Service on port $port failed to start or is not healthy"
              echo "Checking process logs..."
              cd apps/functions-run
              if [ -f "logs/genkit.log" ] && [ "$port" = "3001" ]; then
                echo "Genkit service logs:"
                tail -n 20 logs/genkit.log
              elif [ -f "logs/rest-api.log" ] && [ "$port" = "3002" ]; then
                echo "REST API service logs:"
                tail -n 20 logs/rest-api.log
              elif [ -f "logs/websocket.log" ] && [ "$port" = "3003" ]; then
                echo "WebSocket service logs:"
                tail -n 20 logs/websocket.log
              elif [ -f "logs/prometheus.log" ] && [ "$port" = "3004" ]; then
                echo "Prometheus service logs:"
                tail -n 20 logs/prometheus.log
              else
                echo "No log file found for port $port"
              fi
              cd ../..
              exit 1
            }
            echo "Service on port $port is healthy"
          done
          
          echo "All mock services are ready!"

      - name: Test
        run: |
          echo "Starting tests with 10 minute timeout..."
          timeout 600 pnpm test || {
            echo "Tests failed or timed out after 10 minutes"
            echo "Checking mock services status..."
            for port in 3001 3002 3003 3004; do
              curl -f http://localhost:$port/health 2>/dev/null && echo "Port $port: OK" || echo "Port $port: FAILED"
            done
            exit 1
          }
        env:
          # Ensure tests know mock services are available
          MOCK_SERVICES_ENABLED: true
          MOCK_GENKIT_PORT: 3001
          MOCK_REST_API_PORT: 3002
          MOCK_WEBSOCKET_PORT: 3003
          MOCK_PROMETHEUS_PORT: 3004
          # R√©duire le timeout Jest pour √©viter les blocages
          JEST_TIMEOUT: 15000

      - name: Stop Mock Services
        if: always()
        run: |
          chmod +x scripts/stop-mock-services.sh
          ./scripts/stop-mock-services.sh
        working-directory: .

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Build
        run: pnpm build

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 10.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - uses: nrwl/nx-set-shas@v4

      - name: Security Audit
        run: |
          echo "üîç Running security audit..."
          pnpm audit --audit-level moderate
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Security vulnerabilities detected!"
            echo "Please run 'pnpm audit --fix' to resolve them."
            exit 1
          else
            echo "‚úÖ No security vulnerabilities found."
          fi

      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          pnpm outdated || echo "Some dependencies are outdated. Consider updating them."
