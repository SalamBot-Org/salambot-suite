# Kong Gateway Docker Compose Configuration
# SalamBot Suite - Kong Gateway Implementation

version: '3.8'

services:
  # PostgreSQL Database for Kong
  kong-database:
    image: postgres:13
    container_name: salambot-kong-db
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Database Migrations
  kong-migrations:
    image: kong:3.4
    container_name: salambot-kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    networks:
      - kong-net
    restart: "no"

  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: salambot-kong-gateway
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      # Database Configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      
      # Logging Configuration
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      
      # Admin API Configuration
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      
      # Proxy Configuration
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      
      # Plugins
      KONG_PLUGINS: bundled,prometheus
      
      # Performance
      KONG_WORKER_PROCESSES: auto
      KONG_NGINX_WORKER_CONNECTIONS: 1024
    ports:
      - "8000:8000"   # Kong Proxy HTTP
      - "8443:8443"   # Kong Proxy HTTPS
      - "8001:8001"   # Kong Admin API HTTP
      - "8444:8444"   # Kong Admin API HTTPS
      - "8002:8002"   # Kong Manager HTTP
      - "8445:8445"   # Kong Manager HTTPS
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for Rate Limiting and Caching
  redis:
    image: redis:7-alpine
    container_name: salambot-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-salambot-redis-pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: salambot-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - kong-net
    restart: unless-stopped

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: salambot-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - kong-net
    restart: unless-stopped

  # SalamBot Functions Runtime (Genkit)
  functions-run:
    build:
      context: ./apps/functions-run
      dockerfile: Dockerfile
    container_name: salambot-functions
    environment:
      NODE_ENV: development
      PORT: 3000
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-salambot-redis-pass}
    ports:
      - "3000:3000"
    volumes:
      - ./apps/functions-run/src:/app/src
    networks:
      - kong-net
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  kong_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  kong-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16