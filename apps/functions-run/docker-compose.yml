# =============================================================================
# SalamBot API Gateway Enterprise - Docker Compose Configuration
# =============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # API Gateway Enterprise
  # ---------------------------------------------------------------------------
  salambot-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: salambot-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - METRICS_ENABLED=true
      - GENKIT_SERVICE_URL=http://genkit-service:3001
      - REST_API_SERVICE_URL=http://rest-api-service:3002
      - WEBSOCKET_SERVICE_URL=http://websocket-service:3003
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - prometheus
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.salambot-gateway.rule=Host(`api.salambot.local`)"
      - "traefik.http.services.salambot-gateway.loadbalancer.server.port=3000"

  # ---------------------------------------------------------------------------
  # Redis Cache & Session Store
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: salambot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Prometheus Monitoring
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: salambot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Grafana Dashboard
  # ---------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: salambot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - salambot-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Nginx Load Balancer (optionnel)
  # ---------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: salambot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - salambot-gateway
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---------------------------------------------------------------------------
  # Services SimulÃ©s (pour les tests)
  # ---------------------------------------------------------------------------
  genkit-service:
    image: node:18-alpine
    container_name: salambot-genkit-mock
    restart: unless-stopped
    ports:
      - "3001:3001"
    command: |
      sh -c '
        echo "Starting Genkit Mock Service..."
        mkdir -p /app
        cd /app
        cat > server.js << EOF
        const http = require("http");
        const server = http.createServer((req, res) => {
          res.writeHead(200, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ service: "genkit", status: "ok", timestamp: new Date().toISOString() }));
        });
        server.listen(3001, () => console.log("Genkit Mock Service running on port 3001"));
        EOF
        node server.js
      '
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  rest-api-service:
    image: node:18-alpine
    container_name: salambot-rest-api-mock
    restart: unless-stopped
    ports:
      - "3002:3002"
    command: |
      sh -c '
        echo "Starting REST API Mock Service..."
        mkdir -p /app
        cd /app
        cat > server.js << EOF
        const http = require("http");
        const server = http.createServer((req, res) => {
          res.writeHead(200, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ service: "rest-api", status: "ok", timestamp: new Date().toISOString() }));
        });
        server.listen(3002, () => console.log("REST API Mock Service running on port 3002"));
        EOF
        node server.js
      '
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002"]
      interval: 30s
      timeout: 10s
      retries: 3

  websocket-service:
    image: node:18-alpine
    container_name: salambot-websocket-mock
    restart: unless-stopped
    ports:
      - "3003:3003"
    command: |
      sh -c '
        echo "Starting WebSocket Mock Service..."
        mkdir -p /app
        cd /app
        cat > server.js << EOF
        const http = require("http");
        const server = http.createServer((req, res) => {
          res.writeHead(200, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ service: "websocket", status: "ok", timestamp: new Date().toISOString() }));
        });
        server.listen(3003, () => console.log("WebSocket Mock Service running on port 3003"));
        EOF
        node server.js
      '
    networks:
      - salambot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# Networks
# =============================================================================
networks:
  salambot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local