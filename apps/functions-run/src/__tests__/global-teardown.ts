/**
 * Teardown Global pour les Tests d'Int√©gration
 * SalamBot Functions-Run - API Gateway Enterprise
 * 
 * @description Arr√™te proprement tous les services mock apr√®s l'ex√©cution
 *              de la suite de tests d'int√©gration
 * @author SalamBot Platform Team
 * @created 2025-06-02
 */

import { ChildProcess } from 'child_process';
import { stopRedisMemoryServer } from './redis-memory-setup';

// Interface pour les services mock (doit correspondre √† global-setup.ts)
interface MockService {
  name: string;
  port: number;
  process?: ChildProcess;
  scriptPath: string;
  healthEndpoint?: string;
}

// Timeout pour l'arr√™t des services
const SERVICE_SHUTDOWN_TIMEOUT = 10000; // 10 secondes
const FORCE_KILL_DELAY = 5000; // 5 secondes avant kill forc√©

/**
 * Arr√™te un service mock proprement
 */
function stopMockService(service: MockService): Promise<boolean> {
  return new Promise((resolve) => {
    if (!service.process) {
      console.log(`‚ö†Ô∏è  Service ${service.name}: Aucun processus √† arr√™ter`);
      resolve(true);
      return;
    }
    
    console.log(`üõë Arr√™t du service ${service.name} (PID: ${service.process.pid})...`);
    
    let isResolved = false;
    
    // Timeout de s√©curit√©
    const timeout = setTimeout(() => {
      if (!isResolved) {
        console.warn(`‚ö†Ô∏è  Timeout lors de l'arr√™t de ${service.name}, kill forc√©...`);
        service.process?.kill('SIGKILL');
        isResolved = true;
        resolve(false);
      }
    }, SERVICE_SHUTDOWN_TIMEOUT);
    
    // √âcouter la fin du processus
    service.process.on('exit', (code, signal) => {
      if (!isResolved) {
        clearTimeout(timeout);
        isResolved = true;
        
        if (code === 0 || signal === 'SIGTERM') {
          console.log(`‚úÖ Service ${service.name} arr√™t√© proprement`);
          resolve(true);
        } else {
          console.warn(`‚ö†Ô∏è  Service ${service.name} arr√™t√© avec le code ${code} (signal: ${signal})`);
          resolve(false);
        }
      }
    });
    
    service.process.on('error', (error) => {
      if (!isResolved) {
        clearTimeout(timeout);
        isResolved = true;
        console.error(`‚ùå Erreur lors de l'arr√™t de ${service.name}:`, error.message);
        resolve(false);
      }
    });
    
    // Tentative d'arr√™t gracieux
    try {
      service.process.kill('SIGTERM');
      
      // Si pas d'arr√™t gracieux apr√®s 5 secondes, kill forc√©
      setTimeout(() => {
        if (!isResolved && service.process && !service.process.killed) {
          console.warn(`‚ö†Ô∏è  Arr√™t gracieux √©chou√© pour ${service.name}, kill forc√©...`);
          service.process.kill('SIGKILL');
        }
      }, FORCE_KILL_DELAY);
      
    } catch (error) {
      if (!isResolved) {
        clearTimeout(timeout);
        isResolved = true;
        console.error(`‚ùå Erreur lors de l'envoi du signal SIGTERM √† ${service.name}:`, error);
        resolve(false);
      }
    }
  });
}

/**
 * Nettoie les ressources Redis de test
 */
async function cleanupRedisTestData(): Promise<void> {
  try {
    // Utiliser le client Redis en m√©moire si disponible
    const { getRedisTestClient, cleanRedisTestData } = await import('./redis-memory-setup');
    
    const redisClient = getRedisTestClient();
    if (redisClient) {
      await cleanRedisTestData();
      console.log('üßπ Nettoyage Redis en m√©moire termin√©');
    } else {
      console.log('üßπ Aucun client Redis en m√©moire √† nettoyer');
    }
      
  } catch (error) {
    console.warn('‚ö†Ô∏è  Erreur lors du nettoyage Redis (non critique):', (error as Error).message);
    // Ne pas faire √©chouer le teardown pour Redis
  }
}

/**
 * Nettoie les fichiers temporaires de test
 */
async function cleanupTempFiles(): Promise<void> {
  try {
    const { promises: fs } = await import('fs');
    const path = await import('path');
    
    // Nettoyer les logs de test
    const logPath = path.resolve(__dirname, '../../logs/test-gateway.log');
    try {
      await fs.unlink(logPath);
      console.log('üßπ Fichier de log de test supprim√©');
    } catch (error) {
      // Fichier n'existe pas, pas grave
    }
    
    // Nettoyer les fichiers de couverture temporaires
    const coveragePath = path.resolve(__dirname, '../../coverage');
    try {
      await fs.rmdir(coveragePath, { recursive: true });
      console.log('üßπ Dossier de couverture temporaire supprim√©');
    } catch (error) {
      // Dossier n'existe pas, pas grave
    }
    
  } catch (error) {
    console.warn('‚ö†Ô∏è  Erreur lors du nettoyage des fichiers temporaires (non critique):', (error as Error).message);
    // Ne pas faire √©chouer le teardown
  }
}

/**
 * Affiche un r√©sum√© des tests
 */
function displayTestSummary(): void {
  const testResults = (global as Record<string, unknown>)['__TEST_RESULTS__'] as {
    numPassedTests?: number;
    numFailedTests?: number;
    numPendingTests?: number;
    testExecTime?: number;
  } | undefined;
  
  if (testResults) {
    console.log('üìä === R√âSUM√â DES TESTS ===');
    console.log(`‚úÖ Tests r√©ussis: ${testResults.numPassedTests || 0}`);
    console.log(`‚ùå Tests √©chou√©s: ${testResults.numFailedTests || 0}`);
    console.log(`‚è≠Ô∏è  Tests ignor√©s: ${testResults.numPendingTests || 0}`);
    console.log(`‚è±Ô∏è  Dur√©e totale: ${testResults.testExecTime || 0}ms`);
  }
}

/**
 * Teardown global - Point d'entr√©e
 */
export default async function globalTeardown(): Promise<void> {
  console.log('üß™ === TEARDOWN GLOBAL DES TESTS D\'INT√âGRATION ===');
  
  const startTime = Date.now();
  
  try {
    // R√©cup√©rer les services depuis le setup global
    const mockServices: MockService[] = (global as Record<string, unknown>)['__MOCK_SERVICES__'] as MockService[] || [];
    
    if (mockServices.length === 0) {
      console.log('‚ö†Ô∏è  Aucun service mock √† arr√™ter');
    } else {
      console.log(`üõë Arr√™t de ${mockServices.length} service(s) mock...`);
      
      // Arr√™ter tous les services en parall√®le
      const stopPromises = mockServices.map(service => stopMockService(service));
      const results = await Promise.all(stopPromises);
      
      // Compter les succ√®s et √©checs
      const successCount = results.filter(Boolean).length;
      const failureCount = results.length - successCount;
      
      if (failureCount > 0) {
        console.warn(`‚ö†Ô∏è  ${failureCount} service(s) n'ont pas pu √™tre arr√™t√©s proprement`);
      }
      
      console.log(`‚úÖ ${successCount}/${mockServices.length} service(s) arr√™t√©(s) avec succ√®s`);
    }
    
    // Nettoyer les donn√©es Redis de test
    console.log('üßπ Nettoyage des donn√©es de test...');
    await cleanupRedisTestData();
    
    // Arr√™ter Redis en m√©moire
    console.log('üì¶ Arr√™t de Redis en m√©moire...');
    await stopRedisMemoryServer();
    
    // Nettoyer les fichiers temporaires
    await cleanupTempFiles();
    
    // Afficher le r√©sum√© des tests
    displayTestSummary();
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ Teardown global termin√© (${duration}ms)`);
    console.log('üéØ Environnement de test nettoy√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du teardown global:', error);
    
    // Tentative de nettoyage forc√© en cas d'erreur
    const mockServices: MockService[] = (global as Record<string, unknown>)['__MOCK_SERVICES__'] as MockService[] || [];
    for (const service of mockServices) {
      if (service.process && !service.process.killed) {
        try {
          service.process.kill('SIGKILL');
          console.log(`üî™ Kill forc√© du service ${service.name}`);
        } catch (killError) {
          console.error(`‚ùå Impossible de tuer le service ${service.name}:`, killError);
        }
      }
    }
    
    throw error;
  } finally {
    // Nettoyer les r√©f√©rences globales
    delete (global as Record<string, unknown>)['__MOCK_SERVICES__'];
    delete (global as Record<string, unknown>)['__TEST_RESULTS__'];
  }
}