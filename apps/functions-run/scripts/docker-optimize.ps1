# Script d'optimisation Docker pour SalamBot (Windows PowerShell)
# ==============================================================

param(
    [switch]$Force,
    [switch]$FullClean
)

# Configuration des couleurs
$ErrorActionPreference = "Continue"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Green"
}

function Write-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Yellow"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Red"
}

Write-ColorOutput "üê≥ Optimisation Docker SalamBot - D√©marrage" "Magenta"
Write-ColorOutput "============================================" "Magenta"

# V√©rification que Docker est install√© et en cours d'ex√©cution
try {
    $null = docker --version
    Write-Info "Docker est install√©"
} catch {
    Write-Error "Docker n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

try {
    $null = docker info 2>$null
    Write-Info "Docker est en cours d'ex√©cution"
} catch {
    Write-Error "Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker Desktop."
    exit 1
}

# Affichage de l'espace disque avant optimisation
Write-Info "Espace disque utilis√© par Docker avant optimisation:"
docker system df

Write-Host ""
Write-Info "D√©marrage du nettoyage..."

# 1. Arr√™t des conteneurs SalamBot
Write-Info "Arr√™t des conteneurs SalamBot..."
try {
    docker-compose -f docker-compose.test.yml down --remove-orphans 2>$null
} catch {
    # Ignore les erreurs si le fichier n'existe pas
}

try {
    docker-compose down --remove-orphans 2>$null
} catch {
    # Ignore les erreurs si le fichier n'existe pas
}
Write-Success "Conteneurs arr√™t√©s"

# 2. Suppression des conteneurs arr√™t√©s
Write-Info "Suppression des conteneurs arr√™t√©s..."
$stoppedContainers = docker ps -aq --filter "status=exited" 2>$null
if ($stoppedContainers) {
    docker rm $stoppedContainers 2>$null
    Write-Success "Conteneurs arr√™t√©s supprim√©s"
} else {
    Write-Info "Aucun conteneur arr√™t√© √† supprimer"
}

# 3. Suppression des images non utilis√©es (dangling)
Write-Info "Suppression des images non utilis√©es..."
$unusedImages = docker images -f "dangling=true" -q 2>$null
if ($unusedImages) {
    docker rmi $unusedImages 2>$null
    Write-Success "Images non utilis√©es supprim√©es"
} else {
    Write-Info "Aucune image non utilis√©e √† supprimer"
}

# 4. Suppression des volumes non utilis√©s
Write-Info "Suppression des volumes non utilis√©s..."
docker volume prune -f 2>$null
Write-Success "Volumes non utilis√©s supprim√©s"

# 5. Suppression des r√©seaux non utilis√©s
Write-Info "Suppression des r√©seaux non utilis√©s..."
docker network prune -f 2>$null
Write-Success "R√©seaux non utilis√©s supprim√©s"

# 6. Nettoyage du cache de build
Write-Info "Nettoyage du cache de build Docker..."
docker builder prune -f 2>$null
Write-Success "Cache de build nettoy√©"

# 7. Nettoyage complet du syst√®me (optionnel)
if ($FullClean -or (!$Force)) {
    if (!$FullClean) {
        $response = Read-Host "Voulez-vous effectuer un nettoyage complet du syst√®me Docker? (y/N)"
        if ($response -match "^[Yy]$") {
            $FullClean = $true
        }
    }
    
    if ($FullClean) {
        Write-Warning "Nettoyage complet du syst√®me Docker..."
        docker system prune -a -f 2>$null
        Write-Success "Nettoyage complet termin√©"
    }
}

# Affichage de l'espace disque apr√®s optimisation
Write-Host ""
Write-Info "Espace disque utilis√© par Docker apr√®s optimisation:"
docker system df

Write-Host ""
Write-Success "Optimisation Docker termin√©e avec succ√®s! üéâ"

# Conseils d'optimisation
Write-Host ""
Write-Info "üí° Conseils pour maintenir Docker optimis√©:"
Write-Host "   ‚Ä¢ Ex√©cutez ce script r√©guli√®rement" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Utilisez des images multi-stage pour r√©duire la taille" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Supprimez les images de d√©veloppement apr√®s usage" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Utilisez .dockerignore pour exclure les fichiers inutiles" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Configurez la rotation des logs Docker" -ForegroundColor Gray

Write-Host ""
Write-Info "Pour reconstruire les images optimis√©es:"
Write-Host "   docker-compose -f docker-compose.test.yml build --no-cache" -ForegroundColor Gray

Write-Host ""
Write-Info "Utilisation du script:"
Write-Host "   .\docker-optimize.ps1                    # Mode interactif" -ForegroundColor Gray
Write-Host "   .\docker-optimize.ps1 -Force             # Sans confirmation" -ForegroundColor Gray
Write-Host "   .\docker-optimize.ps1 -FullClean         # Nettoyage complet" -ForegroundColor Gray
Write-Host "   .\docker-optimize.ps1 -Force -FullClean  # Nettoyage complet sans confirmation" -ForegroundColor Gray