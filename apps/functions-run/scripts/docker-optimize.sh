#!/bin/bash
# Script d'optimisation Docker pour SalamBot
# ==========================================

set -e

echo "üê≥ Optimisation Docker SalamBot - D√©marrage"
echo "============================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification que Docker est install√© et en cours d'ex√©cution
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√© ou n'est pas dans le PATH"
    exit 1
fi

if ! docker info &> /dev/null; then
    log_error "Docker n'est pas en cours d'ex√©cution"
    exit 1
fi

log_info "Docker est disponible et en cours d'ex√©cution"

# Affichage de l'espace disque avant optimisation
log_info "Espace disque utilis√© par Docker avant optimisation:"
docker system df

echo ""
log_info "D√©marrage du nettoyage..."

# 1. Arr√™t des conteneurs SalamBot
log_info "Arr√™t des conteneurs SalamBot..."
docker-compose -f docker-compose.test.yml down --remove-orphans 2>/dev/null || true
docker-compose down --remove-orphans 2>/dev/null || true
log_success "Conteneurs arr√™t√©s"

# 2. Suppression des conteneurs arr√™t√©s
log_info "Suppression des conteneurs arr√™t√©s..."
STOPPED_CONTAINERS=$(docker ps -aq --filter "status=exited")
if [ ! -z "$STOPPED_CONTAINERS" ]; then
    docker rm $STOPPED_CONTAINERS
    log_success "Conteneurs arr√™t√©s supprim√©s"
else
    log_info "Aucun conteneur arr√™t√© √† supprimer"
fi

# 3. Suppression des images non utilis√©es
log_info "Suppression des images non utilis√©es..."
UNUSED_IMAGES=$(docker images -f "dangling=true" -q)
if [ ! -z "$UNUSED_IMAGES" ]; then
    docker rmi $UNUSED_IMAGES
    log_success "Images non utilis√©es supprim√©es"
else
    log_info "Aucune image non utilis√©e √† supprimer"
fi

# 4. Suppression des volumes non utilis√©s
log_info "Suppression des volumes non utilis√©s..."
docker volume prune -f
log_success "Volumes non utilis√©s supprim√©s"

# 5. Suppression des r√©seaux non utilis√©s
log_info "Suppression des r√©seaux non utilis√©s..."
docker network prune -f
log_success "R√©seaux non utilis√©s supprim√©s"

# 6. Nettoyage du cache de build
log_info "Nettoyage du cache de build Docker..."
docker builder prune -f
log_success "Cache de build nettoy√©"

# 7. Nettoyage complet du syst√®me (optionnel)
read -p "Voulez-vous effectuer un nettoyage complet du syst√®me Docker? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_warning "Nettoyage complet du syst√®me Docker..."
    docker system prune -a -f
    log_success "Nettoyage complet termin√©"
fi

# Affichage de l'espace disque apr√®s optimisation
echo ""
log_info "Espace disque utilis√© par Docker apr√®s optimisation:"
docker system df

echo ""
log_success "Optimisation Docker termin√©e avec succ√®s! üéâ"

# Conseils d'optimisation
echo ""
log_info "üí° Conseils pour maintenir Docker optimis√©:"
echo "   ‚Ä¢ Ex√©cutez ce script r√©guli√®rement"
echo "   ‚Ä¢ Utilisez des images multi-stage pour r√©duire la taille"
echo "   ‚Ä¢ Supprimez les images de d√©veloppement apr√®s usage"
echo "   ‚Ä¢ Utilisez .dockerignore pour exclure les fichiers inutiles"
echo "   ‚Ä¢ Configurez la rotation des logs Docker"

echo ""
log_info "Pour reconstruire les images optimis√©es:"
echo "   docker-compose -f docker-compose.test.yml build --no-cache"